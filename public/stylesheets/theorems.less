/* Change this value to change the saturation and lightness of the background colors of the theorem environments. 
The colors that you type below in theoremEnvironments will all get standardized to have the same saturation and lightness. */
@theoremEnvironmentSaturation: 100%;
@theoremEnvironmentLightness: 92%;

/*"Array" of names and colors to select from.
Be careful that every environment has a color, 
and don't ever choose white, gray, or black, since the "saturation"
and "hue" of white and black don't behave well. */
@theoremEnvironments:
theorem green,
axiom green,
conjecture green,
corollary green,
proposition green,
lemma green,
claim green,
condition green,
idea green,
definition green,
conclusion green,
summary green,
warning red,
paradox red,
example yellow,
observation yellow,
fact yellow,
remark yellow,
algorithm yellow,
notation yellow,
criterion yellow,
exercise blue,
problem blue,
question blue
exploration blue;

/* This is a faux loop that doesn't end up in the final css. 
Writing this does not actually cause the loop to be executed; see below
for that. @index is the counter variable, but .loop is not a keyword!
We want to stop when the index reaches the end of the list of environments. */

.loop (@index) when (@index =< length(@theoremEnvironments)){

   /* theoremEnvironments above is a list of lists. Get the correct list: */
   @thisTheoremEnvironment: extract(@theoremEnvironments, @index);

   /*Extract from the list the name and color of the class*/
   @nameOfClass: extract(@thisTheoremEnvironment, 1);
   @colorOfClass: extract(@thisTheoremEnvironment, 2);
   @counterToIncrement: @nameOfClass;
   /* I can imagine us wanting some of the environments to share a counter, in which case you would put something else here. */

   body {
      counter-reset: @counterToIncrement;     /* The body needs to initialize all the counters. */
   }
   
   .@{nameOfClass} { 

      /* Take the color of the class, saturate it to a fixed value, and lighten it to a fixed value (see top of file) */
      background-color: hsl(hue(@colorOfClass),@theoremEnvironmentSaturation,@theoremEnvironmentLightness);

      /* Increment the counter for this theorem type. */
      counter-increment: @counterToIncrement;

      /*These are the things that are common to all environments. */
      border-radius: 4pt; padding: 1em; margin-top: 4pt; margin-bottom: 4pt;
   }
   .@{nameOfClass}::before
   {
      content:"@{nameOfClass} " counter(@counterToIncrement) ". ";          
      display: inline;
      text-transform: capitalize;   /* CSS here only applies to one word, like "Theorem." or "Example." */
      font-weight: bold; 
   } 
   .@{nameOfClass} ul{
       padding-left: 1em;
   }

   /* When things are nested, don't push them right */
   .@{nameOfClass} .@{nameOfClass} {
       padding: 0em;
   }
  
   /* Here we execute loop again for the next entry. */
   .loop(@index + 1);
}

/* This calls the loop with @index set to 1, thus starting the loop. Without this, all the code above would never run. */
.loop(1);

